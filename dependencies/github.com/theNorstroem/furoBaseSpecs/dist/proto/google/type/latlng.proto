// Code generated by furo-proto-gen. DO NOT EDIT.
syntax = "proto3";
package google.type;
option go_package = "google.golang.org/genproto/googleapis/type/latlng;latlng";
option java_multiple_files = true;
option java_outer_classname = "LatLngProto";
option java_package = "com.google.type";
option objc_class_prefix = "GTP";



// An object representing a latitude/longitude pair. This is expressed as a pair
//  of doubles representing degrees latitude and degrees longitude. Unless
//  specified otherwise, this must conform to the
//  &lt;a href=&#34;http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf&#34;&gt;WGS84
//  standard&lt;/a&gt;. Values must be within normalized ranges.
// 
//  Example of normalization code in Python:
// 
//      def NormalizeLongitude(longitude):
//        &#34;&#34;&#34;Wraps decimal degrees longitude to [-180.0, 180.0].&#34;&#34;&#34;
//        q, r = divmod(longitude, 360.0)
//        if r &gt; 180.0 or (r == 180.0 and q &lt;= -1.0):
//          return r - 360.0
//        return r
// 
//      def NormalizeLatLng(latitude, longitude):
//        &#34;&#34;&#34;Wraps decimal degrees latitude and longitude to
//        [-90.0, 90.0] and [-180.0, 180.0], respectively.&#34;&#34;&#34;
//        r = latitude % 360.0
//        if r &lt;= 90.0:
//          return r, NormalizeLongitude(longitude)
//        elif r &gt;= 270.0:
//          return r - 360, NormalizeLongitude(longitude)
//        else:
//          return 180 - r, NormalizeLongitude(longitude &#43; 180.0)
// 
//      assert 180.0 == NormalizeLongitude(180.0)
//      assert -180.0 == NormalizeLongitude(-180.0)
//      assert -179.0 == NormalizeLongitude(181.0)
//      assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)
//      assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)
//      assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)
//      assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)
//      assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)
//      assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)
//      assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)
//      assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)
//      assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)
//      assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)
message LatLng {  

    // The latitude in degrees. It must be in the range [-90.0, +90.0].
    double latitude = 1;

    // The longitude in degrees. It must be in the range [-180.0, +180.0].
    double longitude = 2;
}